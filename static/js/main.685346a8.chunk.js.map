{"version":3,"sources":["components/header/Header.js","components/question/QuestionHeader.js","components/question/Score.js","components/question/Question.js","utils/LocalStorage.js","components/study/Study.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","path","window","location","pathname","console","log","className","activeClassName","to","exact","href","target","rel","QuestionHeader","questionType","code","answer","iso2","name","Error","contents","Score","getScorePerc","score","correct","incorrect","Math","round","toString","isQuestion","guess","style","width","streakCurrent","streakLongest","onClick","setScore","type","Question","defaultScore","lastCorrect","reducer","defaultState","storageKey","init","hookVars","useReducer","persisted","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","useLocallyPersistedReducer","action","countriesList","country","ls","sort","countriesLength","length","getRandCountry","findByName","floor","random","useState","setQuestionType","setGuess","setAnswer","setIsQuestion","nextQuestion","previousType","nextType","getNextType","options","setOptions","getButtonClass","option","buttonClass","array","randCountry","includes","push","i","j","temp","shuffleArray","document","body","onkeydown","e","activeElement","indexOf","tagName","toLowerCase","checkFocus","key","map","disabled","tabIndex","userGuess","Study","countryName","theCountry","capital","App","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.685346a8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n  const path = window.location.pathname;\r\n\r\n  console.log(path);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <span className=\"logo\">World Flags Quiz</span>\r\n      {/* {path === \"/study\" && ( */}\r\n      <NavLink activeClassName=\"active\" to=\"/\" exact>\r\n        Take Quiz\r\n      </NavLink>\r\n      {/* )} */}\r\n      {/* {path === \"/\" && ( */}\r\n      <NavLink activeClassName=\"active\" to=\"/study\">\r\n        Study Flags\r\n      </NavLink>\r\n      {/* )} */}\r\n      <a\r\n        className=\"about\"\r\n        href=\"https://github.com/updownupdown/flags\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        About\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Flag from \"react-world-flags\";\r\n\r\nconst QuestionHeader = (props) => {\r\n  const contents = () => {\r\n    switch (props.questionType) {\r\n      case \"name\":\r\n        return (\r\n          <div className=\"flag\">\r\n            <Flag code={props.answer.code.iso2} />\r\n          </div>\r\n        );\r\n      case \"flag\":\r\n        return <span className=\"country-name\">{props.answer.name}</span>;\r\n      default:\r\n        throw new Error();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"question\">\r\n      <span className=\"instructions\">\r\n        {props.questionType === \"flag\" && \"Which flag belongs to:\"}\r\n        {props.questionType === \"name\" && \"Which country has this flag:\"}\r\n      </span>\r\n      {contents()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionHeader;\r\n","import React from \"react\";\r\nimport \"./score.scss\";\r\n\r\nconst Score = (props) => {\r\n  function getScorePerc() {\r\n    const perc =\r\n      props.score.correct === 0 && props.score.incorrect === 0\r\n        ? 50\r\n        : Math.round(\r\n            (props.score.correct /\r\n              (props.score.correct + props.score.incorrect)) *\r\n              100\r\n          );\r\n    return perc.toString();\r\n  }\r\n\r\n  return (\r\n    <div className=\"score\">\r\n      <div className=\"score-top\">\r\n        <span className=\"score-perc\">Score: {getScorePerc()}%</span>\r\n        <span className=\"score-bar\">\r\n          <span\r\n            className={`score-bar-result correct ${\r\n              !props.isQuestion &&\r\n              props.guess !== \"\" &&\r\n              props.guess === props.answer.name &&\r\n              \"highlight\"\r\n            }`}\r\n            style={{ width: `${getScorePerc()}%` }}\r\n          >\r\n            <span className=\"score-bar-result-count\">\r\n              {props.score.correct}\r\n            </span>\r\n          </span>\r\n          <span\r\n            className={`score-bar-result incorrect ${\r\n              !props.isQuestion &&\r\n              props.guess !== \"\" &&\r\n              props.guess !== props.answer.name &&\r\n              \"highlight\"\r\n            }`}\r\n            style={{ width: `${100 - getScorePerc()}%` }}\r\n          >\r\n            <span className=\"score-bar-result-count\">\r\n              {props.score.incorrect}\r\n            </span>\r\n          </span>\r\n        </span>\r\n      </div>\r\n      <div className=\"score-bottom\">\r\n        <span className=\"score-tally\">\r\n          Correct\r\n          <br />\r\n          {props.score.correct} / {props.score.correct + props.score.incorrect}\r\n        </span>\r\n        <span className=\"score-streak-current\">\r\n          Current streak\r\n          <br />\r\n          {props.score.streakCurrent}\r\n        </span>\r\n        <span className=\"score-streak-longest\">\r\n          Longest streak\r\n          <br />\r\n          {props.score.streakLongest}\r\n        </span>\r\n        <button\r\n          className=\"score-reset\"\r\n          onClick={() => {\r\n            props.setScore({ type: \"reset\" });\r\n          }}\r\n        >\r\n          Reset score\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useLocallyPersistedReducer } from \"../../utils/LocalStorage\";\r\nimport country from \"country-list-js\";\r\nimport Flag from \"react-world-flags\";\r\nimport QuestionHeader from \"./QuestionHeader\";\r\nimport Score from \"./Score\";\r\n\r\nfunction Question(props) {\r\n  const defaultScore = {\r\n    correct: 0,\r\n    incorrect: 0,\r\n    streakCurrent: 0,\r\n    streakLongest: 0,\r\n    lastCorrect: false,\r\n  };\r\n\r\n  const [score, setScore] = useLocallyPersistedReducer(\r\n    scoreReducer,\r\n    defaultScore,\r\n    \"score\"\r\n  );\r\n\r\n  function scoreReducer(score, action) {\r\n    switch (action.type) {\r\n      case \"reset\":\r\n        return defaultScore;\r\n      case \"correct\":\r\n        return {\r\n          ...score,\r\n          correct: score.correct + 1,\r\n          lastCorrect: true,\r\n          streakCurrent: score.streakCurrent + 1,\r\n          streakLongest:\r\n            score.streakCurrent >= score.streakLongest\r\n              ? score.streakCurrent + 1\r\n              : score.streakLongest,\r\n        };\r\n      case \"incorrect\":\r\n        return {\r\n          ...score,\r\n          incorrect: score.incorrect + 1,\r\n          lastCorrect: false,\r\n          streakCurrent: 0,\r\n        };\r\n      default:\r\n        throw new Error();\r\n    }\r\n  }\r\n\r\n  const countriesList = country.ls(\"name\").sort();\r\n  const countriesLength = countriesList.length;\r\n\r\n  function getRandCountry() {\r\n    const randCountry = country.findByName(\r\n      countriesList[Math.floor(Math.random() * (countriesLength - 1))]\r\n    );\r\n\r\n    return randCountry;\r\n  }\r\n\r\n  const [questionType, setQuestionType] = useState(\"flag\");\r\n  const [guess, setGuess] = useState(\"\");\r\n  const [answer, setAnswer] = useState(getRandCountry);\r\n  const [isQuestion, setIsQuestion] = useState(true);\r\n\r\n  function makeGuess(userGuess) {\r\n    setGuess(userGuess);\r\n    setIsQuestion(false);\r\n\r\n    if (userGuess === answer.name) {\r\n      setScore({ type: \"correct\" });\r\n    } else {\r\n      setScore({ type: \"incorrect\" });\r\n    }\r\n  }\r\n\r\n  function getNextType(previousType) {\r\n    var nextType = \"flag\";\r\n\r\n    if (previousType === \"flag\") {\r\n      nextType = \"name\";\r\n    }\r\n\r\n    return nextType;\r\n  }\r\n\r\n  function nextQuestion() {\r\n    setAnswer(getRandCountry);\r\n    setQuestionType(getNextType(questionType));\r\n    setIsQuestion(true);\r\n  }\r\n\r\n  const [options, setOptions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!isQuestion) return;\r\n    var array = [answer];\r\n\r\n    while (array.length < 6) {\r\n      const randCountry = getRandCountry();\r\n\r\n      if (!array.includes(randCountry)) {\r\n        array.push(randCountry);\r\n      }\r\n    }\r\n\r\n    setOptions(shuffleArray(array));\r\n  }, [isQuestion]);\r\n\r\n  function shuffleArray(array) {\r\n    let i = array.length - 1;\r\n    for (; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  function checkFocus() {\r\n    const activeElement = document.activeElement;\r\n    const inputs = [\"input\", \"select\", \"textarea\"];\r\n\r\n    if (\r\n      activeElement &&\r\n      inputs.indexOf(activeElement.tagName.toLowerCase()) !== -1\r\n    ) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  document.body.onkeydown = function (e) {\r\n    // Bail if something important is focused\r\n    if (checkFocus()) return;\r\n\r\n    if (e.key === \"Enter\") {\r\n      if (!isQuestion) {\r\n        nextQuestion();\r\n      }\r\n    }\r\n  };\r\n\r\n  function getButtonClass(option) {\r\n    var buttonClass = \"option\";\r\n    if (option === answer.name) {\r\n      if (guess === answer.name) {\r\n        buttonClass += \" correct-guessed\";\r\n      } else {\r\n        buttonClass += \" correct-not-guessed\";\r\n      }\r\n    } else {\r\n      if (option === guess) {\r\n        buttonClass += \" incorrect-guess\";\r\n      } else {\r\n        buttonClass += \" other\";\r\n      }\r\n    }\r\n\r\n    return buttonClass;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Score\r\n        answer={answer}\r\n        score={score}\r\n        setScore={setScore}\r\n        guess={guess}\r\n        isQuestion={isQuestion}\r\n      />\r\n\r\n      <QuestionHeader answer={answer} questionType={questionType} />\r\n\r\n      <div className={`button-group options-${questionType}`}>\r\n        {options.map((option) => (\r\n          <button\r\n            disabled={!isQuestion}\r\n            key={option.name}\r\n            tabIndex={0}\r\n            className={getButtonClass(option.name)}\r\n            onClick={() => {\r\n              makeGuess(option.name);\r\n            }}\r\n          >\r\n            {questionType === \"name\" && option.name}\r\n            {questionType === \"flag\" && (\r\n              <div className=\"flag\">\r\n                <Flag code={option.code.iso2} />\r\n              </div>\r\n            )}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <button\r\n        disabled={isQuestion}\r\n        tabIndex={0}\r\n        className=\"next-question\"\r\n        onClick={() => {\r\n          nextQuestion();\r\n        }}\r\n      >\r\n        Next Question\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n","import { useState, useEffect, useReducer } from \"react\";\r\n\r\nexport const useLocallyPersistedReducer = (\r\n  reducer,\r\n  defaultState,\r\n  storageKey,\r\n  init = null\r\n) => {\r\n  const hookVars = useReducer(reducer, defaultState, (defaultState) => {\r\n    const persisted = JSON.parse(localStorage.getItem(storageKey));\r\n    return persisted !== null\r\n      ? persisted\r\n      : init !== null\r\n      ? init(defaultState)\r\n      : defaultState;\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(storageKey, JSON.stringify(hookVars[0]));\r\n  }, [storageKey, hookVars]);\r\n\r\n  return hookVars;\r\n};\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n};\r\n","import React from \"react\";\r\nimport country from \"country-list-js\";\r\nimport Flag from \"react-world-flags\";\r\n\r\nconst Study = (props) => {\r\n  const countriesList = country.ls(\"name\").sort();\r\n\r\n  return (\r\n    <>\r\n      <h1>Study Flags</h1>\r\n      <div className=\"study\">\r\n        {countriesList.map((countryName) => {\r\n          const theCountry = country.findByName(countryName);\r\n\r\n          return (\r\n            <div key={countryName} className=\"country\">\r\n              <div className=\"info\">\r\n                <span className=\"name\">{countryName}</span>\r\n                <span className=\"capital\">{theCountry.capital}</span>\r\n              </div>\r\n              <div className=\"flag\">\r\n                <Flag code={theCountry.code.iso2} />\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Study;\r\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Header from \"./components/header/Header\";\nimport Question from \"./components/question/Question\";\nimport Study from \"./components/study/Study\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"layout\">\n        <div className=\"layout-center\">\n          <div className=\"layout-top\">\n            <Header />\n          </div>\n          <div className=\"layout-bottom\">\n            <Switch>\n              <Route exact path=\"/\" component={Question} />\n              <Route path=\"/study\" component={Study} />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/style.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}