{"version":3,"sources":["components/header/Header.js","components/question/QuestionHeader.js","components/question/Score.js","components/question/Question.js","utils/LocalStorage.js","components/study/Study.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","activeClassName","to","exact","href","target","rel","QuestionHeader","questionType","code","answer","iso2","name","Error","contents","Score","getScorePerc","score","correct","incorrect","Math","round","toString","isQuestion","guess","style","width","streakCurrent","streakLongest","onClick","setScore","type","Question","defaultScore","lastCorrect","reducer","defaultState","storageKey","init","hookVars","useReducer","persisted","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","useLocallyPersistedReducer","action","countriesList","country","ls","sort","countriesLength","length","getRandCountry","findByName","floor","random","useState","setQuestionType","setGuess","setAnswer","setIsQuestion","nextQuestion","previousType","nextType","getNextType","options","setOptions","getButtonClass","option","buttonClass","array","randCountry","includes","push","i","j","temp","shuffleArray","document","body","onkeydown","e","activeElement","indexOf","tagName","toLowerCase","checkFocus","key","map","disabled","tabIndex","userGuess","Study","countryName","theCountry","capital","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f27eda82.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./header.scss\";\n\nconst Header = (props) => {\n  return (\n    <div className=\"header\">\n      <span className=\"logo\">World Flags Quiz</span>\n      {/* {path === \"/study\" && ( */}\n      <NavLink activeClassName=\"active\" to=\"/\" exact>\n        Take Quiz\n      </NavLink>\n      {/* )} */}\n      {/* {path === \"/\" && ( */}\n      <NavLink activeClassName=\"active\" to=\"/study\">\n        Study Flags\n      </NavLink>\n      {/* )} */}\n      <a\n        className=\"about\"\n        href=\"https://github.com/updownupdown/flags\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        About\n      </a>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport Flag from \"react-world-flags\";\n\nconst QuestionHeader = (props) => {\n  const contents = () => {\n    switch (props.questionType) {\n      case \"name\":\n        return (\n          <div className=\"flag\">\n            <Flag code={props.answer.code.iso2} />\n          </div>\n        );\n      case \"flag\":\n        return <span className=\"country-name\">{props.answer.name}</span>;\n      default:\n        throw new Error();\n    }\n  };\n\n  return (\n    <div className=\"question\">\n      <span className=\"instructions\">\n        {props.questionType === \"flag\" && \"Which flag belongs to:\"}\n        {props.questionType === \"name\" && \"Which country has this flag:\"}\n      </span>\n      {contents()}\n    </div>\n  );\n};\n\nexport default QuestionHeader;\n","import React from \"react\";\nimport \"./score.scss\";\n\nconst Score = (props) => {\n  function getScorePerc() {\n    const perc =\n      props.score.correct === 0 && props.score.incorrect === 0\n        ? 50\n        : Math.round(\n            (props.score.correct /\n              (props.score.correct + props.score.incorrect)) *\n              100\n          );\n    return perc.toString();\n  }\n\n  return (\n    <div className=\"score\">\n      <div className=\"score-top\">\n        <span className=\"score-perc\">Score: {getScorePerc()}%</span>\n        <span className=\"score-bar\">\n          <span\n            className={`score-bar-result correct ${\n              !props.isQuestion &&\n              props.guess !== \"\" &&\n              props.guess === props.answer.name &&\n              \"highlight\"\n            }`}\n            style={{ width: `${getScorePerc()}%` }}\n          >\n            <span className=\"score-bar-result-count\">\n              {props.score.correct}\n            </span>\n          </span>\n          <span\n            className={`score-bar-result incorrect ${\n              !props.isQuestion &&\n              props.guess !== \"\" &&\n              props.guess !== props.answer.name &&\n              \"highlight\"\n            }`}\n            style={{ width: `${100 - getScorePerc()}%` }}\n          >\n            <span className=\"score-bar-result-count\">\n              {props.score.incorrect}\n            </span>\n          </span>\n        </span>\n      </div>\n      <div className=\"score-bottom\">\n        <span className=\"score-tally\">\n          Correct\n          <br />\n          {props.score.correct} / {props.score.correct + props.score.incorrect}\n        </span>\n        <span className=\"score-streak-current\">\n          Current streak\n          <br />\n          {props.score.streakCurrent}\n        </span>\n        <span className=\"score-streak-longest\">\n          Longest streak\n          <br />\n          {props.score.streakLongest}\n        </span>\n        <button\n          className=\"score-reset\"\n          onClick={() => {\n            props.setScore({ type: \"reset\" });\n          }}\n        >\n          Reset score\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Score;\n","import React, { useState, useEffect } from \"react\";\nimport { useLocallyPersistedReducer } from \"../../utils/LocalStorage\";\nimport country from \"country-list-js\";\nimport Flag from \"react-world-flags\";\nimport QuestionHeader from \"./QuestionHeader\";\nimport Score from \"./Score\";\n\nfunction Question(props) {\n  const defaultScore = {\n    correct: 0,\n    incorrect: 0,\n    streakCurrent: 0,\n    streakLongest: 0,\n    lastCorrect: false,\n  };\n\n  const [score, setScore] = useLocallyPersistedReducer(\n    scoreReducer,\n    defaultScore,\n    \"score\"\n  );\n\n  function scoreReducer(score, action) {\n    switch (action.type) {\n      case \"reset\":\n        return defaultScore;\n      case \"correct\":\n        return {\n          ...score,\n          correct: score.correct + 1,\n          lastCorrect: true,\n          streakCurrent: score.streakCurrent + 1,\n          streakLongest:\n            score.streakCurrent >= score.streakLongest\n              ? score.streakCurrent + 1\n              : score.streakLongest,\n        };\n      case \"incorrect\":\n        return {\n          ...score,\n          incorrect: score.incorrect + 1,\n          lastCorrect: false,\n          streakCurrent: 0,\n        };\n      default:\n        throw new Error();\n    }\n  }\n\n  const countriesList = country.ls(\"name\").sort();\n  const countriesLength = countriesList.length;\n\n  function getRandCountry() {\n    const randCountry = country.findByName(\n      countriesList[Math.floor(Math.random() * (countriesLength - 1))]\n    );\n\n    return randCountry;\n  }\n\n  const [questionType, setQuestionType] = useState(\"flag\");\n  const [guess, setGuess] = useState(\"\");\n  const [answer, setAnswer] = useState(getRandCountry);\n  const [isQuestion, setIsQuestion] = useState(true);\n\n  function makeGuess(userGuess) {\n    setGuess(userGuess);\n    setIsQuestion(false);\n\n    if (userGuess === answer.name) {\n      setScore({ type: \"correct\" });\n    } else {\n      setScore({ type: \"incorrect\" });\n    }\n  }\n\n  function getNextType(previousType) {\n    var nextType = \"flag\";\n\n    if (previousType === \"flag\") {\n      nextType = \"name\";\n    }\n\n    return nextType;\n  }\n\n  function nextQuestion() {\n    setAnswer(getRandCountry);\n    setQuestionType(getNextType(questionType));\n    setIsQuestion(true);\n  }\n\n  const [options, setOptions] = useState([]);\n\n  useEffect(() => {\n    if (!isQuestion) return;\n    var array = [answer];\n\n    while (array.length < 6) {\n      const randCountry = getRandCountry();\n\n      if (!array.includes(randCountry)) {\n        array.push(randCountry);\n      }\n    }\n\n    setOptions(shuffleArray(array));\n  }, [isQuestion]);\n\n  function shuffleArray(array) {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  function checkFocus() {\n    const activeElement = document.activeElement;\n    const inputs = [\"input\", \"select\", \"textarea\"];\n\n    if (\n      activeElement &&\n      inputs.indexOf(activeElement.tagName.toLowerCase()) !== -1\n    ) {\n      return true;\n    }\n  }\n\n  document.body.onkeydown = function (e) {\n    // Bail if something important is focused\n    if (checkFocus()) return;\n\n    if (e.key === \"Enter\") {\n      if (!isQuestion) {\n        nextQuestion();\n      }\n    }\n  };\n\n  function getButtonClass(option) {\n    var buttonClass = \"option\";\n    if (option === answer.name) {\n      if (guess === answer.name) {\n        buttonClass += \" correct-guessed\";\n      } else {\n        buttonClass += \" correct-not-guessed\";\n      }\n    } else {\n      if (option === guess) {\n        buttonClass += \" incorrect-guess\";\n      } else {\n        buttonClass += \" other\";\n      }\n    }\n\n    return buttonClass;\n  }\n\n  return (\n    <>\n      <Score\n        answer={answer}\n        score={score}\n        setScore={setScore}\n        guess={guess}\n        isQuestion={isQuestion}\n      />\n\n      <QuestionHeader answer={answer} questionType={questionType} />\n\n      <div className={`button-group options-${questionType}`}>\n        {options.map((option) => (\n          <button\n            disabled={!isQuestion}\n            key={option.name}\n            tabIndex={0}\n            className={getButtonClass(option.name)}\n            onClick={() => {\n              makeGuess(option.name);\n            }}\n          >\n            {questionType === \"name\" && option.name}\n            {questionType === \"flag\" && (\n              <div className=\"flag\">\n                <Flag code={option.code.iso2} />\n              </div>\n            )}\n          </button>\n        ))}\n      </div>\n\n      <button\n        disabled={isQuestion}\n        tabIndex={0}\n        className=\"next-question\"\n        onClick={() => {\n          nextQuestion();\n        }}\n      >\n        Next Question\n      </button>\n    </>\n  );\n}\n\nexport default Question;\n","import { useState, useEffect, useReducer } from \"react\";\n\nexport const useLocallyPersistedReducer = (\n  reducer,\n  defaultState,\n  storageKey,\n  init = null\n) => {\n  const hookVars = useReducer(reducer, defaultState, (defaultState) => {\n    const persisted = JSON.parse(localStorage.getItem(storageKey));\n    return persisted !== null\n      ? persisted\n      : init !== null\n      ? init(defaultState)\n      : defaultState;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(storageKey, JSON.stringify(hookVars[0]));\n  }, [storageKey, hookVars]);\n\n  return hookVars;\n};\n\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n","import React from \"react\";\nimport country from \"country-list-js\";\nimport Flag from \"react-world-flags\";\nimport \"./study.scss\";\n\nconst Study = (props) => {\n  const countriesList = country.ls(\"name\").sort();\n\n  return (\n    <>\n      <h1>Study Flags</h1>\n      <div className=\"study\">\n        {countriesList.map((countryName) => {\n          const theCountry = country.findByName(countryName);\n\n          return (\n            <div key={countryName} className=\"country\">\n              <div className=\"info\">\n                <span className=\"name\">{countryName}</span>\n                <span className=\"capital\">{theCountry.capital}</span>\n              </div>\n              <div className=\"flag\">\n                <Flag code={theCountry.code.iso2} />\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default Study;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Header from \"./components/header/Header\";\nimport Question from \"./components/question/Question\";\nimport Study from \"./components/study/Study\";\nimport \"./css/style.scss\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename={\"/flags\"}>\n      <div className=\"layout\">\n        <div className=\"layout-center\">\n          <div className=\"layout-top\">\n            <Header />\n          </div>\n          <div className=\"layout-bottom\">\n            <Switch>\n              <Route exact path=\"/\" component={Question} />\n              <Route path=\"/study\" component={Study} />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}