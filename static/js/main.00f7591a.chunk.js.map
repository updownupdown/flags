{"version":3,"sources":["components/question/Question.js","App.js","utils/LocalStorage.js","serviceWorker.js","index.js"],"names":["QuestionHeader","props","className","questionType","code","answer","iso2","name","Error","contents","Question","useState","options","setOptions","getButtonClass","option","buttonClass","guess","useEffect","isQuestion","array","length","randCountry","getRandCountry","includes","push","i","j","Math","floor","random","temp","shuffleArray","document","body","onkeydown","e","activeElement","indexOf","tagName","toLowerCase","checkFocus","key","nextQuestion","map","disabled","tabIndex","onClick","makeGuess","App","defaultScore","correct","incorrect","streakCurrent","streakLongest","lastCorrect","reducer","defaultState","storageKey","init","hookVars","useReducer","persisted","JSON","parse","localStorage","getItem","setItem","stringify","useLocallyPersistedReducer","score","action","type","setScore","getScorePerc","round","toString","countriesList","country","ls","sort","countriesLength","findByName","setQuestionType","setGuess","setAnswer","setIsQuestion","href","target","rel","style","width","userGuess","previousType","nextType","getNextType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00f7591a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Flag from \"react-world-flags\";\r\n\r\nexport const QuestionHeader = (props) => {\r\n  const contents = () => {\r\n    switch (props.questionType) {\r\n      case \"name\":\r\n        return (\r\n          <div className=\"flag\">\r\n            <Flag code={props.answer.code.iso2} />\r\n          </div>\r\n        );\r\n      case \"flag\":\r\n        return <span className=\"country-name\">{props.answer.name}</span>;\r\n      default:\r\n        throw new Error();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"question\">\r\n      <span className=\"instructions\">\r\n        {props.questionType === \"flag\" && \"Which flag belongs to:\"}\r\n        {props.questionType === \"name\" && \"Which country has this flag:\"}\r\n      </span>\r\n      {contents()}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction Question(props) {\r\n  const [options, setOptions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!props.isQuestion) return;\r\n    var array = [props.answer];\r\n\r\n    while (array.length < 6) {\r\n      const randCountry = props.getRandCountry();\r\n\r\n      if (!array.includes(randCountry)) {\r\n        array.push(randCountry);\r\n      }\r\n    }\r\n\r\n    setOptions(shuffleArray(array));\r\n  }, [props.isQuestion]);\r\n\r\n  function shuffleArray(array) {\r\n    let i = array.length - 1;\r\n    for (; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  function checkFocus() {\r\n    const activeElement = document.activeElement;\r\n    const inputs = [\"input\", \"select\", \"textarea\"];\r\n\r\n    if (\r\n      activeElement &&\r\n      inputs.indexOf(activeElement.tagName.toLowerCase()) !== -1\r\n    ) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  document.body.onkeydown = function (e) {\r\n    // Bail if something important is focused\r\n    if (checkFocus()) return;\r\n\r\n    if (e.key === \"Enter\") {\r\n      if (!props.isQuestion) {\r\n        props.nextQuestion();\r\n      }\r\n    }\r\n  };\r\n\r\n  function getButtonClass(option) {\r\n    var buttonClass = \"option\";\r\n    if (option === props.answer.name) {\r\n      // Correct answer\r\n      if (props.guess === props.answer.name) {\r\n        // Guessed\r\n        buttonClass += \" correct-guessed\";\r\n      } else {\r\n        // Got wrong\r\n        buttonClass += \" correct-not-guessed\";\r\n      }\r\n    } else {\r\n      // Incorrect answer\r\n      if (option === props.guess) {\r\n        // Guessed\r\n        buttonClass += \" incorrect-guess\";\r\n      } else {\r\n        buttonClass += \" other\";\r\n      }\r\n    }\r\n\r\n    return buttonClass;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <QuestionHeader answer={props.answer} questionType={props.questionType} />\r\n\r\n      <div className={`button-group options-${props.questionType}`}>\r\n        {options.map((option) => (\r\n          <button\r\n            disabled={!props.isQuestion}\r\n            key={option.name}\r\n            tabIndex={0}\r\n            className={getButtonClass(option.name)}\r\n            onClick={() => {\r\n              props.makeGuess(option.name);\r\n            }}\r\n          >\r\n            {props.questionType === \"name\" && option.name}\r\n            {props.questionType === \"flag\" && (\r\n              <div className=\"flag\">\r\n                <Flag code={option.code.iso2} />\r\n              </div>\r\n            )}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <button\r\n        disabled={props.isQuestion}\r\n        tabIndex={0}\r\n        className=\"next-question\"\r\n        onClick={() => {\r\n          props.nextQuestion();\r\n        }}\r\n      >\r\n        Next Question\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n","import React, { useState } from \"react\";\nimport { useLocallyPersistedReducer } from \"./utils/LocalStorage\";\nimport country from \"country-list-js\";\nimport Question from \"./components/question/Question\";\n\nfunction App() {\n  const defaultScore = {\n    correct: 0,\n    incorrect: 0,\n    streakCurrent: 0,\n    streakLongest: 0,\n    lastCorrect: false,\n  };\n\n  const [score, setScore] = useLocallyPersistedReducer(\n    scoreReducer,\n    defaultScore,\n    \"score\"\n  );\n\n  function scoreReducer(score, action) {\n    switch (action.type) {\n      case \"reset\":\n        return defaultScore;\n      case \"correct\":\n        return {\n          ...score,\n          correct: score.correct + 1,\n          lastCorrect: true,\n          streakCurrent: score.streakCurrent + 1,\n          streakLongest:\n            score.streakCurrent >= score.streakLongest\n              ? score.streakCurrent + 1\n              : score.streakLongest,\n        };\n      case \"incorrect\":\n        return {\n          ...score,\n          incorrect: score.incorrect + 1,\n          lastCorrect: false,\n          streakCurrent: 0,\n        };\n      default:\n        throw new Error();\n    }\n  }\n\n  function getScorePerc() {\n    const perc =\n      score.correct === 0 && score.incorrect === 0\n        ? 50\n        : Math.round((score.correct / (score.correct + score.incorrect)) * 100);\n    return perc.toString();\n  }\n\n  // =================================== //\n  const countriesList = country.ls(\"name\").sort();\n  const countriesLength = countriesList.length;\n\n  function getRandCountry() {\n    const randCountry = country.findByName(\n      countriesList[Math.floor(Math.random() * (countriesLength - 1))]\n    );\n\n    return randCountry;\n  }\n\n  const [questionType, setQuestionType] = useState(\"flag\");\n  const [guess, setGuess] = useState(\"\");\n  const [answer, setAnswer] = useState(getRandCountry);\n  const [isQuestion, setIsQuestion] = useState(true);\n\n  function makeGuess(userGuess) {\n    setGuess(userGuess);\n    setIsQuestion(false);\n\n    if (userGuess === answer.name) {\n      setScore({ type: \"correct\" });\n    } else {\n      setScore({ type: \"incorrect\" });\n    }\n  }\n\n  function getNextType(previousType) {\n    var nextType = \"flag\";\n\n    if (previousType === \"flag\") {\n      nextType = \"name\";\n    }\n\n    return nextType;\n  }\n\n  function nextQuestion() {\n    setAnswer(getRandCountry);\n    setQuestionType(getNextType(questionType));\n    setIsQuestion(true);\n  }\n\n  return (\n    <div className=\"layout\">\n      <div className=\"layout-center\">\n        <div className=\"layout-top\">\n          <div className=\"header\">\n            <span className=\"logo\">World Flags Quiz</span>\n            <a\n              className=\"about\"\n              href=\"https://github.com/updownupdown/flags\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              About\n            </a>\n          </div>\n          <div className=\"score\">\n            <div className=\"score-top\">\n              <span className=\"score-perc\">Score: {getScorePerc()}%</span>\n              <span className=\"score-bar\">\n                <span\n                  className={`score-bar-result correct ${\n                    !isQuestion &&\n                    guess !== \"\" &&\n                    guess === answer.name &&\n                    \"highlight\"\n                  }`}\n                  style={{ width: `${getScorePerc()}%` }}\n                >\n                  <span className=\"score-bar-result-count\">\n                    {score.correct}\n                  </span>\n                </span>\n                <span\n                  className={`score-bar-result incorrect ${\n                    !isQuestion &&\n                    guess !== \"\" &&\n                    guess !== answer.name &&\n                    \"highlight\"\n                  }`}\n                  style={{ width: `${100 - getScorePerc()}%` }}\n                >\n                  <span className=\"score-bar-result-count\">\n                    {score.incorrect}\n                  </span>\n                </span>\n              </span>\n            </div>\n            <div className=\"score-bottom\">\n              <span className=\"score-tally\">\n                Correct: {score.correct} / {score.correct + score.incorrect}\n              </span>\n              <span className=\"score-streak-current\">\n                Current streak: {score.streakCurrent}\n              </span>\n              <span className=\"score-streak-longest\">\n                Longest streak: {score.streakLongest}\n              </span>\n              <button\n                className=\"score-reset\"\n                onClick={() => {\n                  setScore({ type: \"reset\" });\n                }}\n              >\n                Reset score\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"layout-bottom\">\n          <Question\n            questionType={questionType}\n            getRandCountry={getRandCountry}\n            countriesList={countriesList}\n            answer={answer}\n            guess={guess}\n            makeGuess={makeGuess}\n            isQuestion={isQuestion}\n            nextQuestion={nextQuestion}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect, useReducer } from \"react\";\r\n\r\nexport const useLocallyPersistedReducer = (\r\n  reducer,\r\n  defaultState,\r\n  storageKey,\r\n  init = null\r\n) => {\r\n  const hookVars = useReducer(reducer, defaultState, (defaultState) => {\r\n    const persisted = JSON.parse(localStorage.getItem(storageKey));\r\n    return persisted !== null\r\n      ? persisted\r\n      : init !== null\r\n      ? init(defaultState)\r\n      : defaultState;\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(storageKey, JSON.stringify(hookVars[0]));\r\n  }, [storageKey, hookVars]);\r\n\r\n  return hookVars;\r\n};\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/style.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}