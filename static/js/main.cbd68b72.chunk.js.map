{"version":3,"sources":["components/autocomplete/Autocomplete.js","components/question-flag/QuestionFlag.js","components/answer-flag/AnswerFlag.js","App.js","utils/LocalStorage.js","serviceWorker.js","index.js"],"names":["Autocomplete","state","activeOption","filteredOptions","showOptions","userInput","onChange","e","options","props","currentTarget","value","filter","optionName","toLowerCase","indexOf","setState","setGuess","checkValidGuess","onClick","innerText","onKeyDown","keyCode","length","optionList","this","className","map","index","key","type","Component","QuestionFlag","useState","validGuess","setValidGuess","guess","console","log","countriesList","includes","useEffect","code","answer","iso2","makeGuess","disabled","AnswerFlag","correct","setCorrect","name","setScore","messages","Math","floor","random","selectMessage","guessedCountry","country","findByName","guessedFlag","capital","nextQuestion","App","defaultScore","incorrect","streakCurrent","streakLongest","lastCorrect","reducer","defaultState","storageKey","init","hookVars","useReducer","persisted","JSON","parse","localStorage","getItem","setItem","stringify","useLocallyPersistedReducer","score","action","Error","ls","sort","countriesLength","getRandCountry","setAnswer","isQuestion","setIsQuestion","href","target","rel","round","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cbd68b72.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./autocomplete.scss\";\r\n\r\nexport class Autocomplete extends Component {\r\n  static propTypes = {\r\n    options: PropTypes.instanceOf(Array).isRequired,\r\n  };\r\n  state = {\r\n    activeOption: 0,\r\n    filteredOptions: [],\r\n    showOptions: false,\r\n    userInput: \"\",\r\n  };\r\n\r\n  onChange = (e) => {\r\n    const { options } = this.props;\r\n    const userInput = e.currentTarget.value;\r\n\r\n    const filteredOptions = options.filter(\r\n      (optionName) =>\r\n        optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n    );\r\n\r\n    this.setState({\r\n      activeOption: 0,\r\n      filteredOptions,\r\n      showOptions: true,\r\n      userInput: e.currentTarget.value,\r\n    });\r\n\r\n    this.props.setGuess(e.currentTarget.value);\r\n    this.props.checkValidGuess();\r\n  };\r\n\r\n  onClick = (e) => {\r\n    this.setState({\r\n      activeOption: 0,\r\n      filteredOptions: [],\r\n      showOptions: false,\r\n      userInput: e.currentTarget.innerText,\r\n    });\r\n\r\n    this.props.setGuess(e.currentTarget.innerText);\r\n    this.props.checkValidGuess();\r\n  };\r\n\r\n  onKeyDown = (e) => {\r\n    const { activeOption, filteredOptions } = this.state;\r\n\r\n    if (e.keyCode === 13) {\r\n      this.setState({\r\n        activeOption: 0,\r\n        showOptions: false,\r\n        userInput: filteredOptions[activeOption],\r\n      });\r\n      this.props.setGuess(filteredOptions[activeOption]);\r\n      this.props.checkValidGuess();\r\n    } else if (e.keyCode === 38) {\r\n      if (activeOption === 0) {\r\n        return;\r\n      }\r\n      this.setState({ activeOption: activeOption - 1 });\r\n    } else if (e.keyCode === 40) {\r\n      if (activeOption === filteredOptions.length - 1) {\r\n        return;\r\n      }\r\n      this.setState({ activeOption: activeOption + 1 });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onChange,\r\n      onClick,\r\n      onKeyDown,\r\n      state: { activeOption, filteredOptions, showOptions, userInput },\r\n    } = this;\r\n\r\n    let optionList;\r\n\r\n    if (showOptions && userInput) {\r\n      if (filteredOptions.length) {\r\n        optionList = (\r\n          <ul className=\"options\">\r\n            {filteredOptions.map((optionName, index) => {\r\n              let className;\r\n              if (index === activeOption) {\r\n                className = \"option-active\";\r\n              }\r\n              return (\r\n                <li className={className} key={optionName} onClick={onClick}>\r\n                  {optionName}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      } else {\r\n        optionList = (\r\n          <div className=\"no-options\">\r\n            <em>No Option!</em>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-box\"\r\n            onChange={onChange}\r\n            onKeyDown={onKeyDown}\r\n            value={userInput}\r\n          />\r\n          <input type=\"submit\" value=\"\" className=\"search-btn\" />\r\n          {optionList}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Autocomplete from \"../autocomplete/Autocomplete\";\r\nimport Flag from \"react-world-flags\";\r\n\r\nfunction QuestionFlag(props) {\r\n  const [validGuess, setValidGuess] = useState(false);\r\n  const [guess, setGuess] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    checkValidGuess();\r\n  }, [guess]);\r\n\r\n  function checkValidGuess() {\r\n    console.log(\"checked valid guess: \" + guess);\r\n    if (props.countriesList.includes(guess)) {\r\n      setValidGuess(true);\r\n    } else {\r\n      setValidGuess(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Guess the flag!</h1>\r\n\r\n      <h3>Guess = {guess}</h3>\r\n      <h3>Valid Guess? = {validGuess ? \"yes\" : \"no\"}</h3>\r\n\r\n      <div className=\"question-flag\">\r\n        <div className=\"flag\">\r\n          <Flag code={props.answer.code.iso2} />\r\n          {/* <p>{props.answer.name}</p> */}\r\n        </div>\r\n      </div>\r\n\r\n      <Autocomplete\r\n        options={props.countriesList}\r\n        setGuess={setGuess}\r\n        checkValidGuess={checkValidGuess}\r\n      />\r\n\r\n      <div className=\"button-group\">\r\n        <button\r\n          onClick={() => {\r\n            props.makeGuess(guess);\r\n          }}\r\n          disabled={!validGuess}\r\n        >\r\n          Answer {guess}\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            props.makeGuess(\"\");\r\n          }}\r\n        >\r\n          Pass\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default QuestionFlag;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport country from \"country-list-js\";\r\nimport Flag from \"react-world-flags\";\r\n\r\nfunction AnswerFlag(props) {\r\n  const [correct, setCorrect] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (props.guess === props.answer.name) {\r\n      setCorrect(true);\r\n      props.setScore({ type: \"correct\" });\r\n    } else {\r\n      setCorrect(false);\r\n      props.setScore({ type: \"incorrect\" });\r\n    }\r\n  }, []);\r\n\r\n  console.log(props.answer);\r\n\r\n  function guessedFlag() {\r\n    const guessedCountry = country.findByName(props.guess);\r\n    console.log(\"code = \" + guessedCountry.code.iso2);\r\n    return (\r\n      <div className=\"flag flag-guess\">\r\n        <Flag code={guessedCountry.code.iso2} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function selectMessage() {\r\n    const messagesWrong = [\r\n      \"Incorrect.\",\r\n      \"Sorry, wrong answer.\",\r\n      \"That’s not it.\",\r\n      \"No cigar.\",\r\n      \"Bummer man.\",\r\n      \"Nah, sorry.\",\r\n      \"Nope.\",\r\n      \"Not quite.\",\r\n      \"What? No.\",\r\n    ];\r\n\r\n    const messagesRight = [\r\n      \"Correct!\",\r\n      \"Yep!\",\r\n      \"That’s it!\",\r\n      \"Good one!\",\r\n      \"That’s right!\",\r\n      \"On the money!\",\r\n      \"Indeed!\",\r\n      \"Yeppers!\",\r\n      \"Awesome!\",\r\n    ];\r\n\r\n    const messages = correct ? messagesRight : messagesWrong;\r\n    const message = messages[Math.floor(Math.random() * (messages.length - 1))];\r\n\r\n    return message;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={`result ${correct ? \"correct\" : \"incorrect\"}`}>\r\n        <span>{selectMessage()}</span>\r\n      </div>\r\n\r\n      {!correct && (\r\n        <div className=\"wrong-guess\">\r\n          {props.guess === \"\" ? (\r\n            <span className=\"wrong-guess-text\">You passed!</span>\r\n          ) : (\r\n            <>\r\n              <span className=\"wrong-guess-text\">\r\n                You guessed: {props.guess}\r\n              </span>\r\n              {guessedFlag()}\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"info\">\r\n        <div className=\"info-text\">\r\n          {props.answer.name && (\r\n            <span className=\"info-name\">{props.answer.name}</span>\r\n          )}\r\n          {props.answer.capital && (\r\n            <span className=\"info-capital\">\r\n              Capital: {props.answer.capital}\r\n            </span>\r\n          )}\r\n        </div>\r\n        <div className=\"info-flag\">\r\n          <div className=\"flag\">\r\n            <Flag code={props.answer.code.iso2} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"button-group\">\r\n        <button\r\n          onClick={() => {\r\n            props.nextQuestion();\r\n          }}\r\n        >\r\n          Next Question\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AnswerFlag;\r\n","import React, { useState } from \"react\";\nimport { useLocallyPersistedReducer } from \"./utils/LocalStorage\";\n// import Autocomplete from \"./components/autocomplete/Autocomplete\";\n// import Flag from \"react-world-flags\";\nimport country from \"country-list-js\";\nimport QuestionFlag from \"./components/question-flag/QuestionFlag\";\nimport AnswerFlag from \"./components/answer-flag/AnswerFlag\";\n\nfunction App() {\n  const defaultScore = {\n    correct: 0,\n    incorrect: 0,\n    streakCurrent: 0,\n    streakLongest: 0,\n    lastCorrect: false,\n  };\n\n  const [score, setScore] = useLocallyPersistedReducer(\n    scoreReducer,\n    defaultScore,\n    \"score\"\n  );\n\n  function scoreReducer(score, action) {\n    switch (action.type) {\n      case \"reset\":\n        return defaultScore;\n      case \"correct\":\n        return {\n          ...score,\n          correct: score.correct + 1,\n          lastCorrect: true,\n          streakCurrent: score.streakCurrent + 1,\n          streakLongest:\n            score.streakCurrent >= score.streakLongest\n              ? score.streakCurrent + 1\n              : score.streakLongest,\n        };\n      case \"incorrect\":\n        return {\n          ...score,\n          incorrect: score.incorrect + 1,\n          lastCorrect: false,\n          streakCurrent: 0,\n        };\n      default:\n        throw new Error();\n    }\n  }\n\n  function getScorePerc() {\n    const perc =\n      score.correct === 0 && score.correct === 0\n        ? 0\n        : Math.round((score.correct / (score.correct + score.incorrect)) * 100);\n    return perc.toString();\n  }\n\n  // =================================== //\n  const countriesList = country.ls(\"name\").sort();\n  const countriesLength = countriesList.length;\n\n  function getRandCountry() {\n    const randCountry = country.findByName(\n      countriesList[Math.floor(Math.random() * (countriesLength - 1))]\n    );\n\n    return randCountry;\n  }\n\n  const [guess, setGuess] = useState(\"\");\n  const [answer, setAnswer] = useState(getRandCountry);\n  const [isQuestion, setIsQuestion] = useState(true);\n\n  function makeGuess(guess) {\n    console.log(\"Making a guess\");\n    setGuess(guess);\n    setIsQuestion(false);\n  }\n\n  function nextQuestion() {\n    console.log(\"Moving to next question...\");\n    setAnswer(getRandCountry);\n    setIsQuestion(true);\n  }\n\n  return (\n    <div className=\"layout\">\n      <div className=\"layout-center\">\n        <div className=\"layout-top\">\n          <div className=\"header\">\n            <span className=\"logo\">World Flags Quiz</span>\n            <a\n              className=\"about\"\n              href=\"https://github.com/updownupdown/flags\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              About\n            </a>\n          </div>\n          <div className=\"score\">\n            <div className=\"score-top\">\n              <span className=\"score-perc\">Score: {getScorePerc()}%</span>\n              <div className=\"score-tally\">\n                <span className=\"score-tally-correct\">{score.correct}</span>\n                <span className=\"score-tally-incorrect\">{score.incorrect}</span>\n              </div>\n            </div>\n            <div className=\"score-bottom\">\n              <span className=\"score-streak-current\">\n                Current streak: {score.streakCurrent}\n              </span>\n              <span className=\"score-streak-longest\">\n                Longest streak: {score.streakLongest}\n              </span>\n              <button\n                className=\"score-reset\"\n                onClick={() => {\n                  setScore({ type: \"reset\" });\n                }}\n              >\n                Reset score\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"layout-bottom\">\n          {isQuestion ? (\n            <QuestionFlag\n              countriesList={countriesList}\n              answer={answer}\n              makeGuess={makeGuess}\n            />\n          ) : (\n            <AnswerFlag\n              guess={guess}\n              answer={answer}\n              setScore={setScore}\n              nextQuestion={nextQuestion}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect, useReducer } from \"react\";\r\n\r\nexport const useLocallyPersistedReducer = (\r\n  reducer,\r\n  defaultState,\r\n  storageKey,\r\n  init = null\r\n) => {\r\n  const hookVars = useReducer(reducer, defaultState, (defaultState) => {\r\n    const persisted = JSON.parse(localStorage.getItem(storageKey));\r\n    return persisted !== null\r\n      ? persisted\r\n      : init !== null\r\n      ? init(defaultState)\r\n      : defaultState;\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(storageKey, JSON.stringify(hookVars[0]));\r\n  }, [storageKey, hookVars]);\r\n\r\n  return hookVars;\r\n};\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/style.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}