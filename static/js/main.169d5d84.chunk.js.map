{"version":3,"sources":["components/question-flag/QuestionFlag.js","components/answer-flag/AnswerFlag.js","App.js","utils/LocalStorage.js","serviceWorker.js","index.js"],"names":["QuestionFlag","props","shuffledOptions","array","answer","length","randCountry","getRandCountry","includes","push","i","j","Math","floor","random","temp","shuffleArray","options","className","code","iso2","map","option","key","name","tabIndex","onClick","console","log","makeGuess","AnswerFlag","useState","correct","setCorrect","useEffect","guess","setScore","type","document","body","onkeydown","e","activeElement","indexOf","tagName","toLowerCase","checkFocus","nextQuestion","messages","selectMessage","guessedCountry","country","findByName","guessedFlag","capital","App","defaultScore","incorrect","streakCurrent","streakLongest","lastCorrect","reducer","defaultState","storageKey","init","hookVars","useReducer","persisted","JSON","parse","localStorage","getItem","setItem","stringify","useLocallyPersistedReducer","score","action","Error","countriesList","ls","sort","countriesLength","setGuess","setAnswer","isQuestion","setIsQuestion","href","target","rel","round","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.169d5d84.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport Flag from \"react-world-flags\";\r\n\r\nfunction QuestionFlag(props) {\r\n  function shuffleArray(array) {\r\n    let i = array.length - 1;\r\n    for (; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  const options = () => {\r\n    var array = [props.answer];\r\n\r\n    while (array.length < 6) {\r\n      const randCountry = props.getRandCountry();\r\n\r\n      if (!array.includes(randCountry)) {\r\n        array.push(randCountry);\r\n      }\r\n    }\r\n\r\n    return shuffleArray(array);\r\n  };\r\n\r\n  const shuffledOptions = options();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"question-flag\">\r\n        <div className=\"flag\">\r\n          <Flag code={props.answer.code.iso2} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"button-group\">\r\n        {shuffledOptions.map((option) => (\r\n          <button\r\n            key={option.name}\r\n            tabIndex={0}\r\n            className=\"option\"\r\n            onClick={() => {\r\n              console.log(option.name);\r\n              props.makeGuess(option.name);\r\n            }}\r\n          >\r\n            {option.name}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default QuestionFlag;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport country from \"country-list-js\";\r\nimport Flag from \"react-world-flags\";\r\n\r\nfunction AnswerFlag(props) {\r\n  const [correct, setCorrect] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (props.guess === props.answer.name) {\r\n      setCorrect(true);\r\n      props.setScore({ type: \"correct\" });\r\n    } else {\r\n      setCorrect(false);\r\n      props.setScore({ type: \"incorrect\" });\r\n    }\r\n  }, []);\r\n\r\n  function guessedFlag() {\r\n    const guessedCountry = country.findByName(props.guess);\r\n\r\n    return (\r\n      <div className=\"flag flag-guess\">\r\n        <Flag code={guessedCountry.code.iso2} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function selectMessage() {\r\n    const messagesWrong = [\r\n      \"Incorrect.\",\r\n      \"Sorry, wrong answer.\",\r\n      \"That’s not it.\",\r\n      \"No cigar.\",\r\n      \"Bummer man.\",\r\n      \"Nah, sorry.\",\r\n      \"Nope.\",\r\n      \"Not quite.\",\r\n      \"What? No.\",\r\n    ];\r\n\r\n    const messagesRight = [\r\n      \"Correct!\",\r\n      \"Yep!\",\r\n      \"That’s it!\",\r\n      \"Good one!\",\r\n      \"That’s right!\",\r\n      \"On the money!\",\r\n      \"Indeed!\",\r\n      \"Yeppers!\",\r\n      \"Awesome!\",\r\n    ];\r\n\r\n    const messages = correct ? messagesRight : messagesWrong;\r\n    const message = messages[Math.floor(Math.random() * (messages.length - 1))];\r\n\r\n    return message;\r\n  }\r\n\r\n  function checkFocus() {\r\n    const activeElement = document.activeElement;\r\n    const inputs = [\"button\", \"input\", \"select\", \"textarea\"];\r\n\r\n    if (\r\n      activeElement &&\r\n      inputs.indexOf(activeElement.tagName.toLowerCase()) !== -1\r\n    ) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  document.body.onkeydown = function (e) {\r\n    // Bail if something important is focused\r\n    if (checkFocus()) return;\r\n\r\n    if (e.key === \"Enter\") {\r\n      props.nextQuestion();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={`result ${correct ? \"correct\" : \"incorrect\"}`}>\r\n        <span>{selectMessage()}</span>\r\n      </div>\r\n\r\n      {!correct && (\r\n        <div className=\"wrong-guess\">\r\n          {props.guess === \"\" ? (\r\n            <span className=\"wrong-guess-text\">You passed!</span>\r\n          ) : (\r\n            <>\r\n              <span className=\"wrong-guess-text\">\r\n                You guessed: {props.guess}\r\n              </span>\r\n              {guessedFlag()}\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"info\">\r\n        <div className=\"info-text\">\r\n          {props.answer.name && (\r\n            <span className=\"info-name\">{props.answer.name}</span>\r\n          )}\r\n          {props.answer.capital && (\r\n            <span className=\"info-capital\">\r\n              Capital: {props.answer.capital}\r\n            </span>\r\n          )}\r\n        </div>\r\n        <div className=\"info-flag\">\r\n          <div className=\"flag\">\r\n            <Flag code={props.answer.code.iso2} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"button-group\">\r\n        <button\r\n          onClick={() => {\r\n            props.nextQuestion();\r\n          }}\r\n        >\r\n          Next Question\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AnswerFlag;\r\n","import React, { useState } from \"react\";\nimport { useLocallyPersistedReducer } from \"./utils/LocalStorage\";\n// import Autocomplete from \"./components/autocomplete/Autocomplete\";\n// import Flag from \"react-world-flags\";\nimport country from \"country-list-js\";\nimport QuestionFlag from \"./components/question-flag/QuestionFlag\";\nimport AnswerFlag from \"./components/answer-flag/AnswerFlag\";\n\nfunction App() {\n  const defaultScore = {\n    correct: 0,\n    incorrect: 0,\n    streakCurrent: 0,\n    streakLongest: 0,\n    lastCorrect: false,\n  };\n\n  const [score, setScore] = useLocallyPersistedReducer(\n    scoreReducer,\n    defaultScore,\n    \"score\"\n  );\n\n  function scoreReducer(score, action) {\n    switch (action.type) {\n      case \"reset\":\n        return defaultScore;\n      case \"correct\":\n        return {\n          ...score,\n          correct: score.correct + 1,\n          lastCorrect: true,\n          streakCurrent: score.streakCurrent + 1,\n          streakLongest:\n            score.streakCurrent >= score.streakLongest\n              ? score.streakCurrent + 1\n              : score.streakLongest,\n        };\n      case \"incorrect\":\n        return {\n          ...score,\n          incorrect: score.incorrect + 1,\n          lastCorrect: false,\n          streakCurrent: 0,\n        };\n      default:\n        throw new Error();\n    }\n  }\n\n  function getScorePerc() {\n    const perc =\n      score.correct === 0 && score.correct === 0\n        ? 0\n        : Math.round((score.correct / (score.correct + score.incorrect)) * 100);\n    return perc.toString();\n  }\n\n  // =================================== //\n  const countriesList = country.ls(\"name\").sort();\n  const countriesLength = countriesList.length;\n\n  function getRandCountry() {\n    const randCountry = country.findByName(\n      countriesList[Math.floor(Math.random() * (countriesLength - 1))]\n    );\n\n    return randCountry;\n  }\n\n  const [guess, setGuess] = useState(\"\");\n  const [answer, setAnswer] = useState(getRandCountry);\n  const [isQuestion, setIsQuestion] = useState(true);\n\n  function makeGuess(guess) {\n    setGuess(guess);\n    setIsQuestion(false);\n  }\n\n  function nextQuestion() {\n    setAnswer(getRandCountry);\n    setIsQuestion(true);\n  }\n\n  return (\n    <div className=\"layout\">\n      <div className=\"layout-center\">\n        <div className=\"layout-top\">\n          <div className=\"header\">\n            <span className=\"logo\">World Flags Quiz</span>\n            <a\n              className=\"about\"\n              href=\"https://github.com/updownupdown/flags\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              About\n            </a>\n          </div>\n          <div className=\"score\">\n            <div className=\"score-top\">\n              <span className=\"score-perc\">Score: {getScorePerc()}%</span>\n              <div className=\"score-tally\">\n                <span className=\"score-tally-correct\">\n                  Correct: {score.correct}\n                </span>\n                <span className=\"score-tally-incorrect\">\n                  Incorrect: {score.incorrect}\n                </span>\n              </div>\n            </div>\n            <div className=\"score-bottom\">\n              <span className=\"score-streak-current\">\n                Current streak: {score.streakCurrent}\n              </span>\n              <span className=\"score-streak-longest\">\n                Longest streak: {score.streakLongest}\n              </span>\n              <button\n                className=\"score-reset\"\n                onClick={() => {\n                  setScore({ type: \"reset\" });\n                }}\n              >\n                Reset score\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"layout-bottom\">\n          {isQuestion ? (\n            <QuestionFlag\n              getRandCountry={getRandCountry}\n              countriesList={countriesList}\n              answer={answer}\n              makeGuess={makeGuess}\n            />\n          ) : (\n            <AnswerFlag\n              guess={guess}\n              answer={answer}\n              setScore={setScore}\n              nextQuestion={nextQuestion}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect, useReducer } from \"react\";\r\n\r\nexport const useLocallyPersistedReducer = (\r\n  reducer,\r\n  defaultState,\r\n  storageKey,\r\n  init = null\r\n) => {\r\n  const hookVars = useReducer(reducer, defaultState, (defaultState) => {\r\n    const persisted = JSON.parse(localStorage.getItem(storageKey));\r\n    return persisted !== null\r\n      ? persisted\r\n      : init !== null\r\n      ? init(defaultState)\r\n      : defaultState;\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(storageKey, JSON.stringify(hookVars[0]));\r\n  }, [storageKey, hookVars]);\r\n\r\n  return hookVars;\r\n};\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/style.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}